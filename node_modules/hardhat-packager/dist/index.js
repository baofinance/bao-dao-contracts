"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@typechain/hardhat/dist/constants");
var fs_extra_1 = __importDefault(require("fs-extra"));
var config_1 = require("hardhat/config");
var plugins_1 = require("hardhat/plugins");
var path_1 = require("path");
var tempy_1 = __importDefault(require("tempy"));
var constants_2 = require("./constants");
var helpers_1 = require("./helpers");
require("./type-extensions");
(0, config_1.extendConfig)(function (config, userConfig) {
    var defaultPackagerConfig = {
        contracts: [],
        includeFactories: false,
    };
    config.packager = __assign(__assign({}, defaultPackagerConfig), userConfig.packager);
});
(0, config_1.subtask)(constants_2.SUBTASK_PREPARE_PACKAGE_ARTIFACTS).setAction(function (_taskArgs, _a) {
    var artifacts = _a.artifacts, config = _a.config;
    return __awaiter(this, void 0, void 0, function () {
        var temporaryPathToArtifacts, _i, _b, contract, artifact;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!fs_extra_1.default.existsSync(config.paths.artifacts)) {
                        throw new plugins_1.HardhatPluginError(constants_2.PLUGIN_NAME, "Please generate the contract artifacts before running this plugin");
                    }
                    temporaryPathToArtifacts = tempy_1.default.directory();
                    _i = 0, _b = config.packager.contracts;
                    _c.label = 1;
                case 1:
                    if (!(_i < _b.length)) return [3 /*break*/, 5];
                    contract = _b[_i];
                    return [4 /*yield*/, artifacts.readArtifact(contract)];
                case 2:
                    artifact = _c.sent();
                    return [4 /*yield*/, fs_extra_1.default.writeJson((0, path_1.join)(temporaryPathToArtifacts, contract + ".json"), artifact, { spaces: 2 })];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 1];
                case 5: 
                // Replace the previous artifacts directory.
                return [4 /*yield*/, fs_extra_1.default.remove(config.paths.artifacts)];
                case 6:
                    // Replace the previous artifacts directory.
                    _c.sent();
                    return [4 /*yield*/, fs_extra_1.default.move(temporaryPathToArtifacts, config.paths.artifacts)];
                case 7:
                    _c.sent();
                    return [2 /*return*/];
            }
        });
    });
});
(0, config_1.subtask)(constants_2.SUBTASK_PREPARE_PACKAGE_TYPECHAIN).setAction(function (_taskArgs, _a) {
    var e_1, _b, e_2, _c;
    var config = _a.config;
    return __awaiter(this, void 0, void 0, function () {
        var pathToBindings, excludedFiles, _d, _e, pathToBinding, fileName, e_1_1, _f, _g, pathToEmptyBindingDirectory, e_2_1;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    pathToBindings = (0, path_1.join)(config.paths.root, config.typechain.outDir);
                    if (!fs_extra_1.default.existsSync(pathToBindings)) {
                        throw new plugins_1.HardhatPluginError(constants_2.PLUGIN_NAME, "Please generate the TypeChain bindings before running this plugin");
                    }
                    excludedFiles = ["common"];
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 7, 8, 13]);
                    _d = __asyncValues((0, helpers_1.getFilesRecursively)(pathToBindings));
                    _h.label = 2;
                case 2: return [4 /*yield*/, _d.next()];
                case 3:
                    if (!(_e = _h.sent(), !_e.done)) return [3 /*break*/, 6];
                    pathToBinding = _e.value;
                    fileName = (0, path_1.basename)(pathToBinding, (0, path_1.extname)(pathToBinding));
                    if (excludedFiles.includes(fileName)) {
                        return [3 /*break*/, 5];
                    }
                    if (!!config.packager.contracts.includes(fileName)) return [3 /*break*/, 5];
                    return [4 /*yield*/, fs_extra_1.default.remove(pathToBinding)];
                case 4:
                    _h.sent();
                    _h.label = 5;
                case 5: return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_1_1 = _h.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _h.trys.push([8, , 11, 12]);
                    if (!(_e && !_e.done && (_b = _d.return))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _b.call(_d)];
                case 9:
                    _h.sent();
                    _h.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13:
                    _h.trys.push([13, 19, 20, 25]);
                    _f = __asyncValues((0, helpers_1.getEmptyDirectoriesRecursively)(pathToBindings));
                    _h.label = 14;
                case 14: return [4 /*yield*/, _f.next()];
                case 15:
                    if (!(_g = _h.sent(), !_g.done)) return [3 /*break*/, 18];
                    pathToEmptyBindingDirectory = _g.value;
                    return [4 /*yield*/, fs_extra_1.default.remove(pathToEmptyBindingDirectory)];
                case 16:
                    _h.sent();
                    _h.label = 17;
                case 17: return [3 /*break*/, 14];
                case 18: return [3 /*break*/, 25];
                case 19:
                    e_2_1 = _h.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 25];
                case 20:
                    _h.trys.push([20, , 23, 24]);
                    if (!(_g && !_g.done && (_c = _f.return))) return [3 /*break*/, 22];
                    return [4 /*yield*/, _c.call(_f)];
                case 21:
                    _h.sent();
                    _h.label = 22;
                case 22: return [3 /*break*/, 24];
                case 23:
                    if (e_2) throw e_2.error;
                    return [7 /*endfinally*/];
                case 24: return [7 /*endfinally*/];
                case 25: return [2 /*return*/];
            }
        });
    });
});
(0, config_1.subtask)(constants_2.SUBTASK_PREPARE_PACKAGE_TYPECHAIN_FACTORIES).setAction(function (_taskArgs, _a) {
    var e_3, _b, e_4, _c;
    var config = _a.config;
    return __awaiter(this, void 0, void 0, function () {
        var pathToBindingsFactories, _d, _e, pathToBindingFactory, contract, e_3_1, _f, _g, pathToEmptyBindingFactoryDirectory, e_4_1;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    pathToBindingsFactories = (0, path_1.join)(config.paths.root, config.typechain.outDir, "factories");
                    if (!fs_extra_1.default.existsSync(pathToBindingsFactories)) {
                        throw new plugins_1.HardhatPluginError(constants_2.PLUGIN_NAME, "Please generate the TypeChain bindings factories before running this plugin");
                    }
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 7, 8, 13]);
                    _d = __asyncValues((0, helpers_1.getFilesRecursively)(pathToBindingsFactories));
                    _h.label = 2;
                case 2: return [4 /*yield*/, _d.next()];
                case 3:
                    if (!(_e = _h.sent(), !_e.done)) return [3 /*break*/, 6];
                    pathToBindingFactory = _e.value;
                    contract = (0, path_1.parse)(pathToBindingFactory).name.replace("__factory", "");
                    if (!!config.packager.contracts.includes(contract)) return [3 /*break*/, 5];
                    return [4 /*yield*/, fs_extra_1.default.remove(pathToBindingFactory)];
                case 4:
                    _h.sent();
                    _h.label = 5;
                case 5: return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_3_1 = _h.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _h.trys.push([8, , 11, 12]);
                    if (!(_e && !_e.done && (_b = _d.return))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _b.call(_d)];
                case 9:
                    _h.sent();
                    _h.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13:
                    _h.trys.push([13, 19, 20, 25]);
                    _f = __asyncValues((0, helpers_1.getEmptyDirectoriesRecursively)(pathToBindingsFactories));
                    _h.label = 14;
                case 14: return [4 /*yield*/, _f.next()];
                case 15:
                    if (!(_g = _h.sent(), !_g.done)) return [3 /*break*/, 18];
                    pathToEmptyBindingFactoryDirectory = _g.value;
                    return [4 /*yield*/, fs_extra_1.default.remove(pathToEmptyBindingFactoryDirectory)];
                case 16:
                    _h.sent();
                    _h.label = 17;
                case 17: return [3 /*break*/, 14];
                case 18: return [3 /*break*/, 25];
                case 19:
                    e_4_1 = _h.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 25];
                case 20:
                    _h.trys.push([20, , 23, 24]);
                    if (!(_g && !_g.done && (_c = _f.return))) return [3 /*break*/, 22];
                    return [4 /*yield*/, _c.call(_f)];
                case 21:
                    _h.sent();
                    _h.label = 22;
                case 22: return [3 /*break*/, 24];
                case 23:
                    if (e_4) throw e_4.error;
                    return [7 /*endfinally*/];
                case 24: return [7 /*endfinally*/];
                case 25: return [2 /*return*/];
            }
        });
    });
});
(0, config_1.task)(constants_2.TASK_PREPARE_PACKAGE, "Prepares the contract artifacts and the TypeChain bindings for registry deployment").setAction(function (_taskArgs, _a) {
    var config = _a.config, run = _a.run;
    return __awaiter(this, void 0, void 0, function () {
        var pathToBindingsFactories;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (config.packager.contracts.length === 0) {
                        console.log("No contracts to prepare. List them in the \"packager\" field of your Hardhat config file.");
                        return [2 /*return*/];
                    }
                    // Run the TypeChain task first. This runs the "compile" task internally, so the contract artifacts are generated too.
                    return [4 /*yield*/, run(constants_1.TASK_TYPECHAIN)];
                case 1:
                    // Run the TypeChain task first. This runs the "compile" task internally, so the contract artifacts are generated too.
                    _b.sent();
                    // Let the user know that the package is being prepared.
                    console.log("Preparing ".concat(config.packager.contracts.length, " contracts ..."));
                    // Prepare the contract artifacts.
                    return [4 /*yield*/, run(constants_2.SUBTASK_PREPARE_PACKAGE_ARTIFACTS)];
                case 2:
                    // Prepare the contract artifacts.
                    _b.sent();
                    if (!config.packager.includeFactories) return [3 /*break*/, 4];
                    return [4 /*yield*/, run(constants_2.SUBTASK_PREPARE_PACKAGE_TYPECHAIN_FACTORIES)];
                case 3:
                    _b.sent();
                    return [3 /*break*/, 6];
                case 4:
                    pathToBindingsFactories = (0, path_1.join)(config.paths.root, config.typechain.outDir, "factories");
                    return [4 /*yield*/, fs_extra_1.default.remove(pathToBindingsFactories)];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6: 
                // Prepare the TypeChain bindings.
                return [4 /*yield*/, run(constants_2.SUBTASK_PREPARE_PACKAGE_TYPECHAIN)];
                case 7:
                    // Prepare the TypeChain bindings.
                    _b.sent();
                    // Let the user know that the package has been prepared successfully.
                    console.log("Successfully prepared ".concat(config.packager.contracts.length, " contracts for registry deployment!"));
                    return [2 /*return*/];
            }
        });
    });
});
//# sourceMappingURL=index.js.map